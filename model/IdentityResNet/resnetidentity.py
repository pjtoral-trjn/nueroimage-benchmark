# -*- coding: utf-8 -*-
"""ResNetIdentity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yyffsl-0MERbQNnHlrse637PtaiCLmnV
"""

# ResnetBlocks
class RESNET3DIdentity:
  def __init__(self, args):
    self.args = args

  def get_model(self):

    def convolution_block(inputs, num_filter, name):
            inputs = tf.keras.layers.Conv3D(num_filter, strides=1, padding="same")(inputs)
            inputs = tfa.layers.InstanceNormalization(center=False, scale=False)(inputs, training=True)
            inputs = tf.keras.layers.MaxPooling3D(2, strides=2, padding="valid")(inputs)
            # inputs = tf.nn.relu(inputs)

            return inputs

    images = tf.keras.Input((96, 96, 96, 1))
    input_skip = input

    ## First layer
    inputs = convolution_block(images, 32, "resnet_conv_block1")
    inputs = tf.nn.relu(inputs)

    ## Second Layer
    inputs = convolution_block(images, 64, "resnet_conv_block2")

    # Adding Identity Residue after 2nd layer
    inputs = tf.keras.layers.Add()([inputs, input_skip])
    inputs = tf.nn.relu(inputs)

    ## Third layer
    inputs = convolution_block(images, 128, "resnet_conv_block3")
    inputs = tf.nn.relu(inputs)

    ## Fourth Layer
    inputs = convolution_block(images, 256, "resnet_conv_block4")

    # Adding Identity Residue after 4th layers
    inputs = tf.keras.layers.Add()([inputs, input_skip])
    inputs = tf.nn.relu(inputs)


    # Last Layer
    inputs = tf.keras.layers.Conv3D(64, 1, strides=1, name="post_resnetIdentity_conv")(inputs)
    inputs = tfa.layers.InstanceNormalization(center=False, scale=False)(inputs, training=True)
    inputs = tf.nn.relu(inputs, name="post_relu")
    inputs = tf.keras.layers.AveragePooling3D(pool_size=(2, 3, 2), strides=2, name="post_avg_pool")(inputs)

    inputs = tf.keras.layers.Dropout(rate=self.args.drop_out, name="drop")(inputs)

    outputs = tf.keras.layers.Conv3D(64, 1, strides=1, name="regIdentity_conv")(inputs)
    outputs = tf.keras.layers.Flatten(name="flatten")(outputs)

    outputs = tf.keras.layers.Dense(units=1, name="Cognitive-Assessment-3DIdentityRSN",
                                        # bias_initializer=tf.keras.initializers.RandomNormal(
                                        #     mean=np.mean(self.data.train_df[self.target_column]),
                                        #     stddev=np.std(self.data.train_df[self.target_column]),
                                        #     seed=self.seed_num)
                                        # activation="sigmoid"
                                        )(outputs)

    # Define the model
    return tf.keras.Model(images, outputs, name="3DIdentityRSN")