class VGGNET3D:
    def __init__(self, args, train_mean, train_std):
        self.args = args
        self.train_mean = train_mean
        self.train_std = train_std

    def get_model(self):

        def convolution_block(inputs, num_filters):
            inputs = tf.keras.layers.Conv3D(num_filters, 3, strides=1, padding="same", activation='relu')(inputs)
            inputs = tfa.layers.InstanceNormalization(center=False, scale=False)(inputs, training=True)
            return inputs

        images = tf.keras.Input((96, 96, 96, 1))

        # VGG Block 1
        inputs = convolution_block(images, 32)
        inputs = convolution_block(inputs, 32)
        inputs = tf.keras.layers.MaxPooling3D(2, strides=2, padding="valid")(inputs)

        # VGG Block 2
        inputs = convolution_block(inputs, 64)
        inputs = convolution_block(inputs, 64)
        inputs = tf.keras.layers.MaxPooling3D(2, strides=2, padding="valid")(inputs)

        # VGG Block 3
        inputs = convolution_block(inputs, 128)
        inputs = convolution_block(inputs, 128)
        inputs = tf.keras.layers.MaxPooling3D(2, strides=2, padding="valid")(inputs)

        # VGG Block 4
        inputs = convolution_block(inputs, 256)
        inputs = convolution_block(inputs, 256)
        inputs = tf.keras.layers.MaxPooling3D(2, strides=2, padding="valid")(inputs)

        # Additional layers
        inputs = tf.keras.layers.Conv3D(64, 1, strides=1, activation='relu', name="post_vgg_conv")(inputs)
        inputs = tfa.layers.InstanceNormalization(center=False, scale=False)(inputs, training=True)
        inputs = tf.keras.layers.AveragePooling3D(pool_size=(2, 3, 2), strides=2, name="post_avg_pool")(inputs)
        inputs = tf.keras.layers.Dropout(rate=self.args.drop_out, name="drop")(inputs)

        # Output layers
        outputs = tf.keras.layers.Conv3D(64, 1, strides=1, activation='relu', name="reg_conv")(inputs)
        outputs = tf.keras.layers.Flatten(name="flatten")(outputs)
        outputs = tf.keras.layers.Dense(units=1, name="Cognitive-Assessment-3DVGG",
                                        bias_initializer=tf.keras.initializers.RandomNormal(
                                            mean=self.train_mean,
                                            stddev=self.train_std,
                                            seed=5)
                                        )(outputs)

        # Define the model
        return tf.keras.Model(images, outputs, name="3DVGG")
